"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Task {
  id: ID!
  title: String!
  description: String
  status: String!
  dueDate: String
  user_id: ID!
  user: User! @belongsTo
  created_at: DateTime!
  updated_at: DateTime!
}

input TaskInput {
    title: String!
    description: String
    status: String
    dueDate: String
    user_id: ID!
}

type AuthPayload {
    token: String!
    user: User!
}

type RegisterResponse {
    status: String!
    message: String!
    token: String!
    user: User!
}

type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "Get all tasks for a specific user"
    tasks(user_id: ID): [Task!]! 
        @field(resolver: "App\\GraphQL\\Queries\\Tasks")

    task(id: ID! @eq): Task 
        @find
}

type Mutation {
    createTask(input: TaskInput!): Task! 
        @field(resolver: "App\\GraphQL\\Mutations\\CreateTask")

    updateTask(
        id: ID!
        title: String
        description: String
        status: String
        dueDate: String
    ): Task!
        @field(resolver: "App\\GraphQL\\Mutations\\UpdateTask")

    deleteTask(id: ID!): Task!
        @field(resolver: "App\\GraphQL\\Mutations\\DeleteTask")

    "Register a new user"
    register(
        name: String!, 
        email: String!, 
        password: String!
    ): RegisterResponse! 
        @field(resolver: "App\\GraphQL\\Mutations\\RegisterUser")

    "Login a user"
    login(
        email: String!, 
        password: String!
    ): AuthPayload 
        @field(resolver: "App\\GraphQL\\Mutations\\LoginUser")

    "Logout the current user"
    logout: Boolean @guard
}